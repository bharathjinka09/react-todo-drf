{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4OA8MeA,G,wDAzMb,WAAYC,GAAO,IAAD,8BAChB,cAAOA,IACFC,MAAQ,CACXC,SAAS,GACTC,WAAW,CACTC,GAAG,KACHC,MAAO,GACPC,WAAW,GAEbC,SAAS,GAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,UAAY,EAAKA,UAAUJ,KAAf,gBACjB,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAClB,EAAKM,eAAiB,EAAKA,eAAeN,KAApB,gBAjBN,E,sDAoBRO,GACJ,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,I,2CAKXU,KAAKnB,e,mCAGM,IAAD,OACVoB,QAAQC,IAAI,qBAEZC,MAAM,qDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACN,EAAKC,SAAS,CACZjC,SAAUgC,S,mCAKLE,GACX,IAAIpB,EAAOoB,EAAEC,OAAOrB,KAChBsB,EAAQF,EAAEC,OAAOC,MACrBV,QAAQC,IAAIb,GACZY,QAAQC,IAAIS,GAEZX,KAAKQ,SAAS,CACZhC,WAAW,eACNwB,KAAK1B,MAAME,WADN,CAERE,MAAOiC,Q,mCAKAF,GAAG,IAAD,OACbA,EAAEG,iBACFX,QAAQC,IAAI,OAAOF,KAAK1B,MAAME,YAE9B,IAAIqC,EAAYb,KAAKf,UAAU,aAE3B6B,EAAM,sDAEe,GAAtBd,KAAK1B,MAAMM,UACZkC,EAAG,6DAAyDd,KAAK1B,MAAME,WAAWC,GAA/E,KACHuB,KAAKQ,SAAS,CACZ5B,SAAS,KAObuB,MAAMW,EAAI,CACRC,OAAQ,OACRC,QAAS,CACP,eAAe,mBACf,cAAeH,GAEjBI,KAAMC,KAAKC,UAAUnB,KAAK1B,MAAME,cAC/B4B,MAAK,SAAAC,GACF,EAAKxB,aACL,EAAK2B,SAAS,CACZhC,WAAW,CACPC,GAAG,KACHC,MAAO,GACPC,WAAW,QAGpByC,OAAM,SAAAC,GAAK,OAAIpB,QAAQC,IAAImB,Q,gCAGtBC,GACNtB,KAAKQ,SAAS,CACZhC,WAAW8C,EACX1C,SAAS,M,iCAIJ0C,GAAM,IAAD,OACVT,EAAYb,KAAKf,UAAU,aAE/BkB,MAAM,sDAAD,OAAuDmB,EAAK7C,GAA5D,KAAkE,CACrEsC,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAeH,KAEhBT,MAAK,SAAAC,GACN,EAAKxB,kB,qCAKMyC,GAAM,IAAD,OAClBA,EAAK3C,WAAa2C,EAAK3C,UACvB,IAAIkC,EAAYb,KAAKf,UAAU,aAC3B6B,EAAG,6DAAyDQ,EAAK7C,GAA9D,KAEP0B,MAAMW,EAAI,CACRC,OAAO,OACPC,QAAS,CACP,eAAgB,mBAChB,cAAeH,GAEjBI,KAAMC,KAAKC,UAAU,CAAC,UAAaG,EAAK3C,UAAW,MAAQ2C,EAAK5C,UAC/D0B,MAAK,SAAAC,GAAQ,OAAI,EAAKxB,gBAEzBoB,QAAQC,IAAIoB,EAAK3C,a,+BAIjB,IAAI4C,EAAQvB,KAAK1B,MAAMC,SACnBiD,EAAOxB,KACX,OACI,yBAAKyB,UAAU,aACX,yBAAKA,UAAU,+BACb,yCAEJ,yBAAKhD,GAAG,kBACN,yBAAKA,GAAG,gBACF,0BAAMiD,SAAU1B,KAAKhB,aAAcP,GAAG,QACpC,yBAAKgD,UAAU,gBACb,yBAAKE,MAAO,CAACC,KAAM,IACjB,2BAAOC,SAAU7B,KAAKjB,aAAcN,GAAG,QAAQgD,UAAU,eAAeK,KAAK,OAAOnB,MAAOX,KAAK1B,MAAME,WAAWE,MAAOW,KAAK,QAAQ0C,YAAY,cAEnJ,yBAAKJ,MAAO,CAACC,KAAM,IACjB,2BAAOnD,GAAG,SAASgD,UAAU,0BAA0BK,KAAK,SAASzC,KAAK,YAMtF,yBAAKZ,GAAG,gBACL8C,EAAMS,KAAI,SAACV,EAAKW,GAAN,OAEL,yBAAKC,IAAQD,EAAQR,UAAU,6BAE7B,yBAAKU,QAAS,kBAAMX,EAAKpC,eAAekC,IAAOK,MAAQ,CAAEC,KAAK,KACvC,IAAnBN,EAAK3C,UACL,8BAAO2C,EAAK5C,OAEZ,gCAAS4C,EAAK5C,QAKlB,yBAAKiD,MAAQ,CAAEC,KAAK,IAClB,4BAAQO,QAAS,kBAAMX,EAAKtC,UAAUoC,IAAOG,UAAU,0BAAyB,uBAAGA,UAAU,mBAG/F,yBAAKE,MAAQ,CAAEC,KAAK,IAClB,4BAAQO,QAAS,kBAAMX,EAAKrC,WAAWmC,IAAOG,UAAU,yBAAxD,iB,GA1LNW,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASuD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAM+B,a","file":"static/js/main.5e63a255.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super (props);\n    this.state = {\n      todoList:[],\n      activeItem:{\n        id:null,\n        title: '',\n        completed: false,\n      },\n      editing: false,\n    }\n    this.fetchTasks = this.fetchTasks.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getCookie = this.getCookie.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.strikeUnstrike = this.strikeUnstrike.bind(this);\n  };\n\n  getCookie(name) {\n        var cookieValue = null;\n        if (document.cookie && document.cookie !== '') {\n            var cookies = document.cookie.split(';');\n            for (var i = 0; i < cookies.length; i++) {\n                var cookie = cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n\n  componentWillMount(){\n    this.fetchTasks();\n  }\n\n  fetchTasks(){\n    console.log('Fetching tasks...')\n\n    fetch('https://bharath-todo.herokuapp.com/api/task-list/')\n    .then(response => response.json())\n    .then(data => \n        this.setState({\n          todoList: data\n        })\n      )\n  }\n\n  handleChange(e){\n    var name = e.target.name\n    var value = e.target.value\n    console.log(name)\n    console.log(value)\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title: value\n      }\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault()\n    console.log('Item',this.state.activeItem)\n\n    var csrftoken = this.getCookie('csrftoken');\n\n    var url = 'https://bharath-todo.herokuapp.com/api/task-create/'\n    \n    if(this.state.editing == true){\n      url = `https://bharath-todo.herokuapp.com/api/task-update/${this.state.activeItem.id}/`\n      this.setState({\n        editing: false\n      })\n    }\n\n\n\n\n    fetch(url,{\n      method: 'POST',\n      headers: {\n        'Content-Type':'application/json',\n        'X-CSRFToken': csrftoken,\n      },\n      body: JSON.stringify(this.state.activeItem)\n    }).then(response => {\n          this.fetchTasks()\n          this.setState({\n            activeItem:{\n                id:null,\n                title: '',\n                completed: false,\n              }\n          })\n    }).catch(error => console.log(error))\n  }\n\n  startEdit(task){\n      this.setState({\n        activeItem:task,\n        editing: true,\n      })\n  }\n\n  deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(`https://bharath-todo.herokuapp.com/api/task-delete/${task.id}/`,{\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken,\n      },\n    }).then(response => {\n      this.fetchTasks()\n    })\n\n  }\n\n  strikeUnstrike(task){\n    task.completed = !task.completed\n    var csrftoken = this.getCookie('csrftoken')\n    var url = `https://bharath-todo.herokuapp.com/api/task-update/${task.id}/`\n\n    fetch(url,{\n      method:'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken,\n      },\n      body: JSON.stringify({'completed': task.completed, 'title':task.title})\n    }).then(response => this.fetchTasks())\n\n    console.log(task.completed)\n  }\n\n  render(){\n    var tasks = this.state.todoList\n    var self = this\n    return(\n        <div className='container'>\n            <div className='text-center text-white mt-5'>\n              <h2>ToDo App</h2>\n            </div>\n          <div id='task-container'>\n            <div id='form-wrapper'>\n                  <form onSubmit={this.handleSubmit} id=\"form\">\n                    <div className=\"flex-wrapper\">\n                      <div style={{flex: 6}}>\n                        <input onChange={this.handleChange} id=\"title\" className=\"form-control\" type=\"text\" value={this.state.activeItem.title} name=\"title\" placeholder=\"Add Task\" />\n                      </div>\n                      <div style={{flex: 1}}>\n                        <input id=\"submit\" className=\"btn btn-outline-primary\" type=\"submit\" name='Add' />\n                      </div>\n                    </div>\n                  </form>\n            </div>\n\n            <div id='list-wrapper'>\n              {tasks.map((task,index) => (\n  \n                    <div key = { index } className='task-wrapper flex-wrapper'>\n                      \n                      <div onClick={() => self.strikeUnstrike(task)} style={ { flex:7 }}>\n                        { task.completed === false ? ( \n                          <span>{task.title}</span>\n                          ) : (\n                          <strike>{task.title}</strike>\n\n                          )}\n                      </div>\n\n                      <div style={ { flex:1 }}>\n                        <button onClick={() => self.startEdit(task)} className='btn btn-sm btn-primary'><i className='fa fa-pencil'></i></button>\n                      </div>\n\n                      <div style={ { flex:1 }}>\n                        <button onClick={() => self.deleteItem(task)} className='btn btn-sm btn-danger'>X</button>\n                      </div>\n                    \n                    </div>\n\n                ))}\n            </div>\n\n\n          </div>\n        \n        </div>\n      )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}